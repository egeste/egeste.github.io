<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="600" viewBox="0 0 1200 600">
  <defs>
    <linearGradient id="heroGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#0a0a0f;stop-opacity:1"/>
      <stop offset="50%" style="stop-color:#1a1a2e;stop-opacity:0.8"/>
      <stop offset="100%" style="stop-color:#2a2a4e;stop-opacity:1"/>
    </linearGradient>
    
    <radialGradient id="neonPulse" cx="50%" cy="50%" r="50%">
      <stop offset="0%" style="stop-color:#00ffff;stop-opacity:0.6"/>
      <stop offset="30%" style="stop-color:#ff00ff;stop-opacity:0.3"/>
      <stop offset="70%" style="stop-color:#00ff00;stop-opacity:0.2"/>
      <stop offset="100%" style="stop-color:#000000;stop-opacity:0"/>
    </radialGradient>
    
    <filter id="heroGlow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge> 
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  
  <!-- Base background -->
  <rect width="1200" height="600" fill="url(#heroGradient)"/>
  
  <!-- Grid pattern overlay -->
  <g opacity="0.2">
    <defs>
      <pattern id="heroGrid" x="0" y="0" width="60" height="60" patternUnits="userSpaceOnUse">
        <path d="M 0,0 L 0,60 L 60,60 L 60,0 Z" fill="none" stroke="#00ffff" stroke-width="1" opacity="0.3"/>
        <circle cx="30" cy="30" r="2" fill="#ff00ff" opacity="0.5"/>
      </pattern>
    </defs>
    <rect width="1200" height="600" fill="url(#heroGrid)"/>
  </g>
  
  <!-- Neural network visualization -->
  <g opacity="0.4" filter="url(#heroGlow)">
    <!-- Main nodes -->
    <circle cx="200" cy="150" r="12" fill="#00ffff" opacity="0.8">
      <animate attributeName="r" values="12;16;12" dur="4s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.8;0.4;0.8" dur="4s" repeatCount="indefinite"/>
    </circle>
    <circle cx="400" cy="200" r="10" fill="#ff00ff" opacity="0.7"/>
    <circle cx="600" cy="120" r="8" fill="#00ff00" opacity="0.9"/>
    <circle cx="800" cy="250" r="14" fill="#00ffff" opacity="0.6"/>
    <circle cx="1000" cy="180" r="9" fill="#ff00ff" opacity="0.8"/>
    
    <!-- Connections -->
    <line x1="200" y1="150" x2="400" y2="200" stroke="#00ffff" stroke-width="2" opacity="0.4"/>
    <line x1="400" y1="200" x2="600" y2="120" stroke="#ff00ff" stroke-width="2" opacity="0.3"/>
    <line x1="600" y1="120" x2="800" y2="250" stroke="#00ff00" stroke-width="2" opacity="0.4"/>
    <line x1="800" y1="250" x2="1000" y2="180" stroke="#00ffff" stroke-width="2" opacity="0.3"/>
    
    <!-- Data flow animation -->
    <circle cx="200" cy="150" r="3" fill="#ffffff" opacity="0.8">
      <animateMotion dur="8s" repeatCount="indefinite">
        <path d="M0,0 L200,50 L200,-80 L200,100 L200,-30"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;1;0" dur="8s" repeatCount="indefinite"/>
    </circle>
  </g>
  
  <!-- Ambient light effects -->
  <g opacity="0.15">
    <ellipse cx="300" cy="400" rx="150" ry="80" fill="url(#neonPulse)">
      <animateTransform attributeName="transform" 
                        attributeType="XML" 
                        type="scale" 
                        values="1;1.2;1" 
                        dur="6s" 
                        repeatCount="indefinite"/>
    </ellipse>
    <ellipse cx="900" cy="100" rx="120" ry="60" fill="url(#neonPulse)">
      <animateTransform attributeName="transform" 
                        attributeType="XML" 
                        type="scale" 
                        values="1;0.8;1" 
                        dur="8s" 
                        repeatCount="indefinite"/>
    </ellipse>
  </g>
  
  <!-- Code fragments floating -->
  <g font-family="monospace" font-size="10" opacity="0.1" fill="#00ffff">
    <text x="50" y="450">const automation = new AI()</text>
    <text x="700" y="500">process.optimize().execute()</text>
    <text x="300" y="80">function enhance() { return true; }</text>
    <text x="850" y="350">neural.network.connect()</text>
  </g>
</svg>